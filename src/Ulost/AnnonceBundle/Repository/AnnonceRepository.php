<?php

namespace Ulost\AnnonceBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\QueryBuilder;
use Ulost\AnnonceBundle\Entity\Annonce;
use Ulost\MunicipaleBundle\Entity\Service;
use Ulost\ObjectBundle\Entity\Object;
use Ulost\UserBundle\Entity\User;
use Ulost\VilleBundle\Entity\Ville;

/**
 * AnnonceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AnnonceRepository extends EntityRepository
{

    public function getAllAnnonce()
    {

        $query = $this->getEntityManager()->createQueryBuilder('a')
            ->add('select', 'a, o, u, v')
            ->add('from', 'UlostAnnonceBundle:Annonce a')
            ->leftJoin('a.object', 'o')
            ->leftJoin('a.user', 'u')
            ->leftJoin('a.ville', 'v');
        return $query;
    }

    public function whereCurrentYear(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.date BETWEEN :start AND :end')
            ->setParameter('start', new \Datetime(date('Y') . '-01-01'))// Date entre le 1er janvier de cette année
            ->setParameter('end', new \Datetime(date('Y') . '-12-31'))  // Et le 31 décembre de cette année
        ;
    }

    public function wherePublished(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.published = true')
            ->andWhere('a.archived = false');
    }

    public function whereArchived(QueryBuilder $qb)
    {
        $qb
            ->andWhere('a.archived = true');
    }
    public function whereLost(QueryBuilder $qb){
        $qb
            ->andWhere('a.status = :status')
            ->setParameter('status', 'lost');
    }
    public function whereFound(QueryBuilder $qb){
        $qb
            ->andWhere('a.status = :status')
            ->setParameter('status', 'found');
    }
    public function whereStatus(QueryBuilder $qb, $status){
        $qb
            ->andWhere('a.status = :status')
            ->setParameter('status', $status);
    }
    /**
     * @param $id_type
     * @param $ville
     * @return array
     */
    public function findAllByTypeAndVille($id_type, $ville, $status)
    {

        $query = $this->createQueryBuilder('a');

        $query->where('a.objet = :id_type')
            ->setParameter('id_type', $id_type)
            ->andWhere('a.ville= :ville')
            ->setParameter('ville', $ville)
            ->andWhere('a.perduTrouve != :status')
            ->setParameter('status', $status)
            ->andWhere('published', true);
        return $query
            ->getQuery()
            ->getResult();
    }


    public function ScalarfindByUser($user)
    {

        $query = $this->getAllAnnonce();
        $this->whereUser($query, $user);
        return $query
            ->getQuery()
            ->getScalarResult();
    }

    public function ScalarfindByUserAndActive($user)
    {

        $query = $this->getAllAnnonce();
        $this->whereUser($query, $user);
        $this->wherePublished($query);
        return $query
            ->getQuery()
            ->getScalarResult();
    }


    public function getAllAnnoncePublished()
    {

        $query = $this->getAllAnnonce()
            ->andWhere('a.published = true');

        return $query;
    }


    public function getAllAnnoncePublishedByUser($user)
    {
        $query = $this->getAllAnnonceByUser($user)
            ->andWhere('a.published = true');

        return $query;
    }

    public function getAllAnnonceArchivedByUser($user)
    {
        $query = $this->getAllAnnonceByUser($user)
            ->andWhere('a.archived = true');

        return $query;
    }

    public function whereUser(QueryBuilder $qb, User $user)
    {
        $qb->andWhere('a.user = :user')
            ->setParameter('user', $user);
    }

    public function getAllAnnonceByUser($user)
    {
        $query = $this->getAllAnnonce();
        $this->whereUser($query, $user);
        return $query;
    }

    public function getCorrespondance1(Annonce $annonce)
    {

        $ville = $annonce->getVille();
        $object = $annonce->getObject();
        $status = $annonce->getStatus();
        $user = $annonce->getUser();
        $query = $this->getAllAnnonce();
        $query
            ->where('a.object = :object')
            ->andWhere('a.ville = :ville')
            ->andwhere('a.status != :status')
            ->andWhere('a.user != :user')
            ->setParameters(array('object' => $object, 'ville' => $ville, 'status' => $status, 'user' => $user));
        $this->wherePublished($query);
        return $query
            ->getQuery()
            ->getResult();
    }

    public function whereVille(QueryBuilder $qb, Ville $ville)
    {
        $qb->andWhere('v = :ville')
            ->setParameter('ville', $ville);
    }

    public function getAllAnnonceByVille(Ville $ville)
    {
        $query = $this->getAllAnnonce();
        $this->whereVille($query, $ville);
        return $query;
    }



    public function whereObjet(QueryBuilder $qb, Object $object)
    {
        $qb->andWhere('o = :object')
            ->setParameter('object', $object);
    }

    public function getAllAnnonceByObject(Object $object)
    {

        $query = $this->getAllAnnonce();
        $this->whereObjet($query, $object);
        return $query;
    }

    public function whereService(QueryBuilder $qb, Service $service)
    {
        $qb->leftJoin('v.villeServiceRelations', "r")
            ->leftJoin('r.service', 's')
            ->andWhere('s = :service')
            ->setParameter('service', $service);
    }

    public function getAllAnnonceByService(Service $service)
    {
        $query = $this->getAllAnnonce();
        $this->whereService($query, $service);

        return $query;
    }

    public function countAllAnnonceByService(Service $service)
    {
        $query = $this->getEntityManager()->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->add('from', 'UlostAnnonceBundle:Annonce a')
            ->leftJoin('a.object', 'o')
            ->leftJoin('a.user', 'u')
            ->leftJoin('a.ville', 'v');
        $this->whereService($query, $service);

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getAllAnnonceEnfantByAnnonce(Annonce $annonce)
    {
        $query = $this->getAllAnnonce()
            ->andWhere('a.parent= :parent')
            ->setParameter('parent', $annonce);
        return $query;
    }
}




























