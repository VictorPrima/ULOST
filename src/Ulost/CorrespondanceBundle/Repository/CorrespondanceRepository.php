<?php

namespace Ulost\CorrespondanceBundle\Repository;

use Ulost\AnnonceBundle\Entity\Annonce;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\EntityManager;
use Doctrine\ORM\QueryBuilder;
use Ulost\MunicipaleBundle\Entity\Service;
use Ulost\ObjectBundle\Entity\Object;
use Ulost\UserBundle\Entity\User;
use Ulost\VilleBundle\Entity\Ville;

/**
 * CorrespondanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CorrespondanceRepository extends \Doctrine\ORM\EntityRepository
{


    public function getAllCorrespondance()
    {
        $query = $this->getEntityManager()->createQueryBuilder('c')
            ->add('select', 'c, l, f, v, o')
            ->add('from', 'UlostCorrespondanceBundle:Correspondance c')
            ->join('c.lost', 'l')
            ->join('c.found', 'f')
            ->leftJoin('l.object', 'o')
            ->leftJoin('l.ville', 'v');
        return $query;
    }

    public function whereLost(QueryBuilder $qb, Annonce $lost)
    {
        $qb->andWhere('l = :lost')
            ->setParameter('lost', $lost);
    }

    public function whereFound(QueryBuilder $qb, Annonce $found)
    {
        $qb->andWhere('f = :found')
            ->setParameter('found', $found);
    }

    public function whereArchived(QueryBuilder $qb)
    {
        $qb->andWhere('c.archived = true');

    }

    public function whereActive(QueryBuilder $qb)
    {
        $qb->andWhere('c.archived = false');

    }

    public function getCorrespondanceByAnnonces($lost, $found)
    {
        $query = $this->getEntityManager()->createQueryBuilder('c')
            ->add('select', 'COUNT(c)')
            ->add('from', 'UlostCorrespondanceBundle:Correspondance c')
            ->join('c.lost', 'l')
            ->join('c.found', 'f')
            ->where('l= :lost AND f = :found')
            ->setParameters(array('found'=> $found, 'lost'=>$lost));
        return $query->getQuery()->getSingleScalarResult();
    }


    public function whereVille(QueryBuilder $qb, Ville $ville)
    {
        $qb->andWhere('v = :ville')
            ->setParameter('ville', $ville);
    }

    public function whereObject(QueryBuilder $qb, Object $object)
    {
        $qb->andWhere('v = :object')
            ->setParameter('object', $object);
    }


    public function getCorrespondanceByObject(Object $object)
    {
        $query = $this->getAllCorrespondance();
        $this->whereObject($query, $object);
        return $query;
    }


    public function findCorrespondanceFromAnnonce(Annonce $annonce)
    {
        $query = $this->getAllCorrespondance();
        $this->whereActive($query);
        if ($annonce->getStatus() == "found") {
            $this->whereFound($query, $annonce);
        } else {
            $this->whereLost($query, $annonce);
        }
        return $query;
    }

    public function whereUser(QueryBuilder $qb, User $user)
    {
        $qb->leftJoin('l.user', 'u1')
            ->leftJoin('f.user', 'u2')
            ->andWhere('u2 = :user OR u1 = :user')
            ->setParameter('user', $user);
    }

    public function findCorrespondancesByUser(User $user)
    {
        $query = $this->getAllCorrespondance();
        $this->whereUser($query, $user);
        return $query;
    }


    public function whereService(QueryBuilder $qb, Service $service)
    {
        $qb->leftJoin('v.villeServiceRelations', 'vsr')
            ->leftJoin('vsr.service', 'serv')
            ->andWhere('serv =:service')
            ->setParameter('service', $service);
    }

    public function findCorrespondancesByService($service)
    {
        $query = $this->getAllCorrespondance();
        $this->whereService($query, $service);
        $this->whereActive($query);
        return $query;
    }

    public function getCorrespondanceByServiceAndObject($service, $object){
        $query = $this->getAllCorrespondance();
        $this->whereService($query, $service);
        $this->whereActive($query);
        $query=$this->whereObject($query, $object);
        return $query;
    }

    public function countAllCorrespondancesByAnnonce(Annonce $annonce)
    {
        $query = $this->getEntityManager()->createQueryBuilder('c')
            ->select('COUNT(c)')
            ->add('from', 'UlostCorrespondanceBundle:Correspondance c')
            ->join('c.lost', 'l')
            ->join('c.found', 'f')
            ->leftJoin('l.object', 'o')
            ->leftJoin('l.ville', 'v');
        $this->whereActive($query);
        if ($annonce->getStatus() == "found") {
            $this->whereFound($query, $annonce);
        } else {
            $this->whereLost($query, $annonce);
        }
        return $query->getQuery()->getSingleScalarResult();
    }

    public function countAllCorrespondancesByService(Service $service)
    {
        $query = $this->getEntityManager()->createQueryBuilder('c')
            ->select('COUNT(c)')
            ->add('from', 'UlostCorrespondanceBundle:Correspondance c')
            ->join('c.lost', 'l')
            ->join('c.found', 'f')
            ->leftJoin('l.object', 'o')
            ->leftJoin('l.ville', 'v');
        $this->whereService($query, $service);

        return $query->getQuery()->getSingleScalarResult();
    }


}
